<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>量化择时——支持向量机模型（一）：介绍</title>
      <link href="/2023/03/18/%E9%87%8F%E5%8C%96%E6%8B%A9%E6%97%B6%E2%80%94%E2%80%94%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA%E6%A8%A1%E5%9E%8B%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E4%BB%8B%E7%BB%8D/"/>
      <url>/2023/03/18/%E9%87%8F%E5%8C%96%E6%8B%A9%E6%97%B6%E2%80%94%E2%80%94%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA%E6%A8%A1%E5%9E%8B%EF%BC%88%E4%B8%80%EF%BC%89%EF%BC%9A%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文内容基于<a href="https://uqer.datayes.com/">优矿平台</a>实现，为本人的研究生课程作业，仍有较多需要改进的地方。</p><h3 id="支持向量机模型简介"><a href="#支持向量机模型简介" class="headerlink" title="支持向量机模型简介"></a>支持向量机模型简介</h3><h4 id="支持向量机模型概念"><a href="#支持向量机模型概念" class="headerlink" title="支持向量机模型概念"></a>支持向量机模型概念</h4><p>支持向量机（简称SVM）是一种基于统计学习理论的模式识别方法，它能非常成功地处理分类、判别分析等问题，并可推广到预测与综合评价领域。其核心思想可以概括为：寻找一个最优分类超平面,使得训练样本中的两类样本点尽量被无错误的分开,并且要使两类的分类间隔最大。</p><p>SVM择时就是利用SVM技术进行大盘趋势的模式识别，将大盘区分为几个明显的模式，找出其中的特征，然后利用历史数据学习的模型来预测未来的趋势。</p><p>支持向量机SVM可分为线性支持向量机和核支持向量机，其中线性支持向量机主要针对线性分类问题。</p><p>线性分类问题中主要需要解决最大间隔分类，最大间隔分类，即在所有可能的分类界面中，寻找使分类边缘最宽的界面，是寻找最佳分类边界的核心原则。</p><p>如下图所示，红色和蓝色两条直线，称为最大边缘超平面，两条直线间距越宽，分类的效果应越好，因此线性支持向量机的目标是寻找一组直线的参数，使得分类间隔取得最大值。</p><p><img src="https://cdn.staticaly.com/gh/miaomiao0426/image@main/img/202303182220100.png"></p><p>但现实中绝大多数时候，数据中会包含噪音，难以用一条直线将两类样本完美地区分开来，于是引入松弛变量的概念。</p><p>对每个样本点赋予一个松弛变量的值：如果该点落在最大边缘超平面正确的一侧，则松弛变量&#x3D;0；否则，松弛变量的值等于该点到最大边缘超平面的距离，如下图所示。</p><p><img src="https://cdn.staticaly.com/gh/miaomiao0426/image@main/img/202303182221104.png"></p><p>引入松弛变量后，目标函数在原有的基础之上加入一项样本松弛变量之和与惩罚系数C的积。其中，惩罚系数C表示模型对错误分类的容忍度。</p><p>当C取较大的数时，即使很小的松弛变量也会造成很大的损失，因此分类器对错误分类的容忍度较低，将尽可能保证分类正确，从而导致较高的训练集正确率。反之，当C 取较小的数时，分类器对错误分类的容忍度较高，允许错误分类的存在，分类器倾向于以最大间隔分类的原则进行分类，如下图所示。</p><p><img src="https://cdn.staticaly.com/gh/miaomiao0426/image@main/img/202303182223728.png"></p><p>线性支持向量机能够处理线性分类问题，然而更多情况下，样本集很难被线性分类。</p><p>对于非线性分类问题，新的解决途径则是增加维度，如下图所示。任何样本集如果利用高维映射转化到无限维上都可以被线性划分。而核函数是为了减少映射到高维空间后的计算量而设计的一个内积函数，任意一种映射方式都对应一个确定的核函数，理论上任何满足一定数学性质的核函数都可以成为核支持向量机的核函数。</p><p>在实际应用中，通常使用线性核、多项式核、Sigmoid 核和高斯核等。多项式核、Sigmoid 核和高斯核的核函数都包含γ值一项，γ决定了原始数据映射到高维数据后，在高维特征空间中的分布。γ越大，样本在高维空间中的分布越稀疏，样本之间间隔越远，更容易被分类边界区分开来。γ的选取影响着模型准确度，是SVM使用中的关键问题。</p><p><img src="https://cdn.staticaly.com/gh/miaomiao0426/image@main/img/202303182225355.png"></p><p>在选核函数之前，我们首先要确定数据集是否线性可分。低维数据可以直接画图辨认，高维数据可以检查凸包是否相交，不相交，则线性可分。确定线性不可分之后，需要采用核支持向量机模型。</p><p>不同核函数的分类性能和分类边界不尽相同，线性核的分类边界为直线，多项式核、Sigmoid 核和高斯核的分类边界在高维空间中为超平面，在原始空间中为曲线。线性核、低阶多项式核和Sigmoid 核计算速度快，不容易过拟合，但是在复杂分类问题下表现不佳。高阶多项式核和高斯核的优点是能够求解复杂的边界，对训练样本的分类能力强大，缺点是计算速度缓慢，并且可能导致过拟合。实际使用中需要根据数据自身的特点，选择最合适的核函数。</p><p>惩罚系数C和γ是影响支持向量分类器性能的关键参数。实际应用中，当数据量较小的候，可以采用“网格搜索”对C和γ进行遍历，选择全局最优参数。但是“网格搜索”计算量很大，一般难以进行，因此主要还是根据C和γ的影响进行判断。</p><p>C和γ越大，惩罚越多，分类器对于错误的容忍程度低；同时经过映射后的样本在高维空间的分布越稀疏，更容易被区分。这都会导致训练集的正确率更高，但是也可能带来过拟合问题，使得偏差减小但方差增大。</p><h4 id="模型基本思路"><a href="#模型基本思路" class="headerlink" title="模型基本思路"></a>模型基本思路</h4><p><img src="https://cdn.staticaly.com/gh/miaomiao0426/image@main/img/202303182227127.jpg"></p><ul><li><p>数据获取</p><p>收集可能用到的历史数据资料，并对数据进行简单的处理。</p><p>人们将量化投资称为”黑箱“就是因为数据由输入转变为输出的过程不为他人所理解，而高质量的数据是好的输出结果的前提。此外，常被忽视的是模型的很多细节也取决于原有的数据特征，因为对数据的处理方式和数据的用处很多时候取决于数据的属性。</p><p>如果数据的获取这一环节出现了问题，策略的运行将无从谈起。获取数据的来源主要有三种：未加工的数据、二手数据和第三方供应商提供的数据。</p></li><li><p>数据拆分</p><p>获取数据后第一步应该做的是数据的拆分，从而使用不同的数据对模型进行训练和测试。</p><p>这一步几乎所有国内相关文献都没有给予足够的重视，他们往往先进行数据的预处理再进行数据的拆分，这样做的后果很可能是最后的测试结果较好但真正用于实践结果时却不如意，因为这存在着”偷窥“数据的操作。</p><p>因此在数据获取后应立即进行拆分为训练集和测试集，并将测试集数据保存好，在整个模型的训练阶段都不要触碰。</p></li><li><p>数据预处理</p><p>数据预处理最主要的工作是使不同特征指标的量纲达到一样。</p><p>最为常见的做法有两种，一种是数据的归一化，压缩数据使得对于每个自变量而言，它们的值都在同一个范围；另一种是标准化，通过压缩数据，使每个自变量值的方差和均值都一样。本文采用数据的标准化。</p></li><li><p>选取特征指标与预测变量</p><p>特征指标的选取就是确定影响模型需要预测目标的影响因素，也就是确定输入变量。</p><p>预测变量的选取就是确定模型需要预测什么。</p></li><li><p>参数寻优</p><p>参数的选择对最后支持向量机模型的好坏起着重要的作用，本文使用SVM分类器来判断涨跌，结合SVM算法寻找出适合训练集的最优参数。</p></li><li><p>SVM模型训练</p><p>确定好整个量化择时策略模型所需要的各个参数后，就是对模型进行训练了。</p></li><li><p>建立模型</p><p>经过输入最优参数后的SVM算法训练后得到模型。</p></li><li><p>评估模型</p><p>在建立好模型后会得到基于训练集模型的评价指标，这些评价指标的值若是达到了预期的目标，就可以进入下一步，若是没有，则需要对以上各步骤进行改进，以达到满意的结果。</p></li><li><p>测试模型</p><p>对训练得出的模型推广（或称泛化）能力用测试集进行验证。</p><p>如果通过测试集验证后各项评价指标比较好，则策略模型表现较好，否则说明推广能力差，模型不成功。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 量化投资相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SVM </tag>
            
            <tag> 量化投资 </tag>
            
            <tag> 优矿 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github+Hexo搭建个人网站（一）:网站搭建</title>
      <link href="/2023/03/17/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2023/03/17/Github+Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本文为基于Github+Hexo的个人网站搭建教程。</p><p>系统环境：win10</p><h3 id="注册github"><a href="#注册github" class="headerlink" title="注册github"></a>注册github</h3><ul><li><p>进入<a href="https://github.com/">https://github.com</a> 点击右上角<em><strong>sign up</strong></em></p><p><img src="https://cdn.staticaly.com/gh/miaomiao0426/image@main/img/202303172212687.png"></p></li></ul><h3 id="创建repository"><a href="#创建repository" class="headerlink" title="创建repository"></a>创建repository</h3><ul><li><p>登录github后，点击右上角**+<strong>号，选择</strong>New repository**创建一个与自己的博客相关的repository项目。</p><p><img src="https://cdn.staticaly.com/gh/miaomiao0426/image@main/img/202303172212366.png"></p></li><li><p>Repository name的格式为<strong>username.github.io</strong>，例如我的username是miaomiao0426，则我的Repository name应为miaomiao0426.github.io</p></li><li><p>勾选<strong>public</strong>，勾选<strong>Add a README file</strong></p></li><li><p>拉到页面下方，点击<strong>Create repository</strong></p><img src="https://cdn.staticaly.com/gh/miaomiao0426/image@main/img/202303172213710.png" style="zoom:80%;" /></li></ul><h3 id="安装Node-js和Git"><a href="#安装Node-js和Git" class="headerlink" title="安装Node.js和Git"></a>安装Node.js和Git</h3><ul><li><p>进入<a href="https://nodejs.org/en/download">Node.js官网</a>，按需下载相应版本安装。</p></li><li><p>进入<a href="https://git-scm.com/download/win">Git官网</a>，按需下载相应版本安装。</p></li></ul><h3 id="检验是否安装完成"><a href="#检验是否安装完成" class="headerlink" title="检验是否安装完成"></a>检验是否安装完成</h3><ul><li><p>同时按下<strong>Win键和R键</strong>，打开运行窗口，输入<strong>cmd</strong>。</p><p><img src="https://cdn.staticaly.com/gh/miaomiao0426/image@main/img/202303172214156.png"></p></li><li><p>输入以下命令，若显示相应版本信息则安装成功。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git --version</span><br><span class="line">$ node -v</span><br><span class="line">$ npm -v</span><br></pre></td></tr></table></figure></li></ul><h3 id="生成SSH密钥"><a href="#生成SSH密钥" class="headerlink" title="生成SSH密钥"></a>生成SSH密钥</h3><p>该操作的目的是：通过git操作实现本地代码库与Github代码库的同步。</p><ul><li><p>从电脑开始页面中找到<strong>git bash</strong>并打开，之后所有的命令均在git bash中输入。</p><p><img src="https://cdn.staticaly.com/gh/miaomiao0426/image@main/img/202303172214070.png"></p></li><li><p>输入以下命令，检查自己电脑上是否有SSH Key，如果显示No such file or directory，说明没有。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> ~/.ssh</span><br></pre></td></tr></table></figure></li><li><p>输入以下命令，其中邮件地址输入注册Github的邮箱地址。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C <span class="string">&quot;邮件地址@youemail.com&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>系统会显示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/your_user_directory/.ssh/id_rsa):</span><br></pre></td></tr></table></figure></li><li><p>点击回车。</p></li><li><p>系统会两次要求输入密码，均直接回车就好。如果想要设置密码，直接输入，但输入密码的时候是没有输入痕迹的。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase):</span><br><span class="line">Enter same passphrase again:</span><br></pre></td></tr></table></figure></li><li><p>接下来系统会显示设置成功，并告诉你密钥存储的位置是<strong>c&#x2F;Users&#x2F;you&#x2F;.ssh&#x2F;id_rsa.pub</strong></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Your identification has been saved <span class="keyword">in</span> /c/Users/you/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /c/Users/you/.ssh/id_rsa.pub.</span><br></pre></td></tr></table></figure></li></ul><h3 id="配置SSH密钥到github上"><a href="#配置SSH密钥到github上" class="headerlink" title="配置SSH密钥到github上"></a>配置SSH密钥到github上</h3><ul><li><p>找到密钥存储的位置，即id_rsa.pub文件。如果找不到这个文件，在.ssh文件夹中，点击查看，勾选隐藏的项目。</p><p><img src="https://cdn.staticaly.com/gh/miaomiao0426/image@main/img/202303172215270.png"></p></li><li><p>用记事本或Notepad++打开此文件，复制其中的内容。</p><p><img src="https://cdn.staticaly.com/gh/miaomiao0426/image@main/img/202303172215287.png"></p></li><li><p>回到github主页，点击右上角头像，点击<strong>Settings</strong>。</p><img src="https://cdn.staticaly.com/gh/miaomiao0426/image@main/img/202303172216323.png" style="zoom:80%;" /></li><li><p>点击左侧<strong>SSH and GPG keys</strong>，点击右上方<strong>New SSH key</strong>。</p><p><img src="https://cdn.staticaly.com/gh/miaomiao0426/image@main/img/202303172217316.png"></p></li><li><p>将刚才复制的内容粘贴进<strong>key</strong>中，<strong>Title</strong>处随便起一个名字，点击<strong>Add SSH key</strong>。</p><p><img src="https://cdn.staticaly.com/gh/miaomiao0426/image@main/img/202303172218800.png"></p></li></ul><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul><li><p>打开<strong>git bash</strong>，输入以下命令，内容不要改动。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br></pre></td></tr></table></figure></li><li><p>系统会显示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">……</span><br><span class="line">Are you sure you want to <span class="built_in">continue</span> connecting (<span class="built_in">yes</span>/no)</span><br></pre></td></tr></table></figure></li><li><p>输入<strong>yes</strong>，<strong>回车</strong>，系统会提示输入刚才设置的密码：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter passphrase <span class="keyword">for</span> key <span class="string">&#x27;/c/Users/your_user_directory/.ssh/id_rsa&#x27;</span>:</span><br></pre></td></tr></table></figure></li><li><p>回车后，看到系统提示成功，表示git可以通过SSH链接到github了。</p></li></ul><h3 id="设置git个人信息"><a href="#设置git个人信息" class="headerlink" title="设置git个人信息"></a>设置git个人信息</h3><ul><li><p>在git bash中输入以下命令。以我个人为例，输入注册时的username即miaomiao0426，输入github注册邮箱即<a href="mailto:&#99;&#111;&#100;&#x65;&#119;&#105;&#x74;&#x68;&#109;&#105;&#97;&#x6f;&#109;&#x69;&#97;&#111;&#64;&#49;&#54;&#x33;&#46;&#x63;&#111;&#x6d;">&#99;&#111;&#100;&#x65;&#119;&#105;&#x74;&#x68;&#109;&#105;&#97;&#x6f;&#109;&#x69;&#97;&#111;&#64;&#49;&#54;&#x33;&#46;&#x63;&#111;&#x6d;</a>。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">&quot;miaomiao0426&quot;</span></span><br><span class="line">$ git config --global user.email <span class="string">&quot;codewithmiaomiao@163.com&quot;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><ul><li><p>在本地新建一个博客文件夹，以我个人为例，在D盘新建”myblog”文件夹。</p></li><li><p>在该文件夹上，点击鼠标右键，选择<strong>Git bash here</strong>。</p></li><li><p>此时，打开的git bash窗口如下所示：</p><p><img src="https://cdn.staticaly.com/gh/miaomiao0426/image@main/img/202303172218011.png"></p></li><li><p>输入以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo</span><br><span class="line">$ hexo init</span><br><span class="line">$ npm install</span><br><span class="line">$ npm install hexo -deployer-git --save</span><br></pre></td></tr></table></figure></li><li><p>此时，打开myblog文件夹可以发现，Hexo已经在该文件夹下面建立博客所需要的所有文件了。</p></li><li><p>输入以下命令，根据提示在浏览器输入<strong>localhost:4000</strong>预览hexo博客：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure></li><li><p>按<strong>ctrl+C</strong>可以退出预览。此时，博客给了一个默认的主题landscape，还有一篇Hello World示例文章。</p></li><li><p>我们可以修改配置自己喜欢的主题和个性化装饰（下一篇文章细讲）。</p></li></ul><h3 id="将博客部署到github"><a href="#将博客部署到github" class="headerlink" title="将博客部署到github"></a>将博客部署到github</h3><ul><li><p>进入github个人主页的<strong>repository</strong>中，复制<strong>SSH</strong>。</p><p><img src="https://cdn.staticaly.com/gh/miaomiao0426/image@main/img/202303172218933.png"></p></li><li><p>用记事本或Notepad++打开<strong>D:&#x2F;myblog&#x2F;_config.yml</strong>，拉到页面最下方，找到<strong>deploy处</strong>，修改代码如下，并将刚才复制的SSH码粘贴到<strong>repository:</strong> 后面（冒号后有空格）。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repository: git@github.com:usename/usename.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure></li><li><p>修改后保存_config.yml文件，在myblog文件夹上右键打开Git bash here，输入以下命令：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo s</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure></li></ul><h3 id="成功"><a href="#成功" class="headerlink" title="成功"></a>成功</h3><ul><li>此时在浏览器输入<strong>usename.github.io</strong>，可进入个人网站。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 个人网站相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
            <tag> personal website </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
